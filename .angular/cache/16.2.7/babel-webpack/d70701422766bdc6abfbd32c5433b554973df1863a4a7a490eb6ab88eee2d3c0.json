{"ast":null,"code":"import { TransporterEditModalComponent } from \"../transporter-edit-modal/transporter-edit-modal.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../logic-components/services/TransporterService\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"@angular/common\";\nfunction TransporterListComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\")(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TransporterListComponent_div_2_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const transporter_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.openEditModal(transporter_r1.id));\n    });\n    i0.ɵɵtext(9, \"Update\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const transporter_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"ID: \", transporter_r1.id, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Name: \", transporter_r1.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Company: \", transporter_r1.company, \"\");\n  }\n}\nexport class TransporterListComponent {\n  constructor(transporterService, modalService) {\n    this.transporterService = transporterService;\n    this.modalService = modalService;\n    this.transporters = [];\n  }\n  ngOnInit() {\n    this.transporterService.getTransporters().subscribe(data => {\n      this.transporters = data;\n    }, error => {\n      console.error('Error fetching transporters', error);\n    });\n  }\n  updateTransporter(transporter) {\n    this.transporterService.updateTransporter(transporter).subscribe(updatedTransporter => {\n      // Actualización exitosa, puedes manejar la respuesta como lo necesites\n      console.log('Transporter updated:', updatedTransporter);\n    }, error => {\n      console.error('Error updating transporter', error);\n    });\n  }\n  openEditModal(transporterId) {\n    this.transporterService.getTransporterDetails(transporterId).subscribe(transporter => {\n      const modalRef = this.modalService.open(TransporterEditModalComponent, {\n        size: 'lg'\n      });\n      modalRef.componentInstance.transporter = transporter;\n    });\n  }\n  static #_ = this.ɵfac = function TransporterListComponent_Factory(t) {\n    return new (t || TransporterListComponent)(i0.ɵɵdirectiveInject(i1.TransporterService), i0.ɵɵdirectiveInject(i2.NgbModal));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TransporterListComponent,\n    selectors: [[\"app-transporter-list\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function TransporterListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"Lista de transportistas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, TransporterListComponent_div_2_Template, 10, 3, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.transporters);\n      }\n    },\n    dependencies: [i3.NgForOf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["TransporterEditModalComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TransporterListComponent_div_2_Template_button_click_8_listener","restoredCtx","ɵɵrestoreView","_r3","transporter_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","openEditModal","id","ɵɵadvance","ɵɵtextInterpolate1","name","company","TransporterListComponent","constructor","transporterService","modalService","transporters","ngOnInit","getTransporters","subscribe","data","error","console","updateTransporter","transporter","updatedTransporter","log","transporterId","getTransporterDetails","modalRef","open","size","componentInstance","_","ɵɵdirectiveInject","i1","TransporterService","i2","NgbModal","_2","selectors","decls","vars","consts","template","TransporterListComponent_Template","rf","ctx","ɵɵtemplate","TransporterListComponent_div_2_Template","ɵɵproperty"],"sources":["/Users/olmansantamaria/IdeaProjects/Patrones-Proyecto/front/laca/src/app/ui-components/transporter/transporter-list/transporter-list.component.ts","/Users/olmansantamaria/IdeaProjects/Patrones-Proyecto/front/laca/src/app/ui-components/transporter/transporter-list/transporter-list.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {TransporterService} from \"../../../logic-components/services/TransporterService\";\nimport {Transporter} from \"../../../logic-components/classes/Transporter\";\nimport {TransporterEditModalComponent} from \"../transporter-edit-modal/transporter-edit-modal.component\";\nimport {NgbModal} from \"@ng-bootstrap/ng-bootstrap\";\n\n@Component({\n  selector: 'app-transporter-list',\n  templateUrl: './transporter-list.component.html',\n  styleUrls: ['./transporter-list.component.css']\n})\nexport class TransporterListComponent implements OnInit {\n  transporters: Transporter[] = [];\n\n  constructor(private transporterService: TransporterService, private modalService: NgbModal) {}\n\n  ngOnInit() {\n    this.transporterService.getTransporters().subscribe(\n      (data) => {\n        this.transporters = data;\n      },\n      (error) => {\n        console.error('Error fetching transporters', error);\n      }\n    );\n  }\n\n  updateTransporter(transporter: Transporter) {\n    this.transporterService.updateTransporter(transporter).subscribe(\n      (updatedTransporter) => {\n        // Actualización exitosa, puedes manejar la respuesta como lo necesites\n        console.log('Transporter updated:', updatedTransporter);\n      },\n      (error) => {\n        console.error('Error updating transporter', error);\n      }\n    );\n  }\n\n  openEditModal(transporterId: number) {\n    this.transporterService.getTransporterDetails(transporterId).subscribe((transporter: any) => {\n      const modalRef = this.modalService.open(TransporterEditModalComponent, { size: 'lg' });\n      modalRef.componentInstance.transporter = transporter;\n    });\n  }\n\n}\n\n","<p>Lista de transportistas</p>\n\n<div *ngFor=\"let transporter of transporters\">\n  <div>\n    <p>ID: {{ transporter.id }}</p>\n    <p>Name: {{ transporter.name }}</p>\n    <p>Company: {{ transporter.company }}</p>\n    <button (click)=\"openEditModal(transporter.id)\">Update</button>\n  </div>\n</div>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}