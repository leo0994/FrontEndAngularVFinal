{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransporterService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/transporters';\n    this.transportersSubject = new BehaviorSubject([]);\n    this.transporters$ = this.transportersSubject.asObservable();\n  }\n  getTransporters() {\n    this.transportersSubject.next(initialTransporters);\n  }\n  updateTransporter(updatedTransporter) {\n    const url = `${this.apiUrl}/${updatedTransporter.id}`;\n    return this.http.put(url, updatedTransporter).pipe(tap(response => {\n      // Actualiza la lista de transportistas en transportersSubject después de la actualización exitosa\n      const currentTransporters = this.transportersSubject.value;\n      const index = currentTransporters.findIndex(t => t.id === updatedTransporter.id);\n      if (index !== -1) {\n        currentTransporters[index] = response; // Actualiza el objeto en la lista\n        this.transportersSubject.next([...currentTransporters]);\n      }\n    }));\n  }\n  addTransporter(newTransporter) {\n    return this.http.post(this.apiUrl, newTransporter);\n  }\n  getTransporterDetails(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url);\n  }\n  static #_ = this.ɵfac = function TransporterService_Factory(t) {\n    return new (t || TransporterService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransporterService,\n    factory: TransporterService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","tap","TransporterService","constructor","http","apiUrl","transportersSubject","transporters$","asObservable","getTransporters","next","initialTransporters","updateTransporter","updatedTransporter","url","id","put","pipe","response","currentTransporters","value","index","findIndex","t","addTransporter","newTransporter","post","getTransporterDetails","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/olmansantamaria/IdeaProjects/Patrones-Proyecto/front/laca/src/app/logic-components/services/TransporterService.ts"],"sourcesContent":["// transporter.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {BehaviorSubject, Observable, Subject, tap} from 'rxjs';\nimport {Transporter} from \"../classes/Transporter\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransporterService {\n  private apiUrl = 'http://localhost:8080/transporters';\n  private transportersSubject = new BehaviorSubject<Transporter[]>([]);\n  transporters$ = this.transportersSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  getTransporters(): void{\n    this.transportersSubject.next(initialTransporters);\n  }\n\n  updateTransporter(updatedTransporter: Transporter): Observable<Transporter> {\n    const url = `${this.apiUrl}/${updatedTransporter.id}`;\n    return this.http.put<Transporter>(url, updatedTransporter).pipe(\n      tap((response) => {\n        // Actualiza la lista de transportistas en transportersSubject después de la actualización exitosa\n        const currentTransporters = this.transportersSubject.value;\n        const index = currentTransporters.findIndex(t => t.id === updatedTransporter.id);\n\n        if (index !== -1) {\n          currentTransporters[index] = response; // Actualiza el objeto en la lista\n          this.transportersSubject.next([...currentTransporters]);\n        }\n      })\n    );\n  }\n\n  addTransporter(newTransporter: Transporter): Observable<Transporter> {\n    return this.http.post<Transporter>(this.apiUrl, newTransporter);\n  }\n\n  getTransporterDetails(id: number): Observable<Transporter> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get<Transporter>(url);\n  }\n\n}\n"],"mappings":"AAGA,SAAQA,eAAe,EAAuBC,GAAG,QAAO,MAAM;;;AAM9D,OAAM,MAAOC,kBAAkB;EAK7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,oCAAoC;IAC7C,KAAAC,mBAAmB,GAAG,IAAIN,eAAe,CAAgB,EAAE,CAAC;IACpE,KAAAO,aAAa,GAAG,IAAI,CAACD,mBAAmB,CAACE,YAAY,EAAE;EAEhB;EAEvCC,eAAeA,CAAA;IACb,IAAI,CAACH,mBAAmB,CAACI,IAAI,CAACC,mBAAmB,CAAC;EACpD;EAEAC,iBAAiBA,CAACC,kBAA+B;IAC/C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIQ,kBAAkB,CAACE,EAAE,EAAE;IACrD,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAcF,GAAG,EAAED,kBAAkB,CAAC,CAACI,IAAI,CAC7DhB,GAAG,CAAEiB,QAAQ,IAAI;MACf;MACA,MAAMC,mBAAmB,GAAG,IAAI,CAACb,mBAAmB,CAACc,KAAK;MAC1D,MAAMC,KAAK,GAAGF,mBAAmB,CAACG,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACR,EAAE,KAAKF,kBAAkB,CAACE,EAAE,CAAC;MAEhF,IAAIM,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBF,mBAAmB,CAACE,KAAK,CAAC,GAAGH,QAAQ,CAAC,CAAC;QACvC,IAAI,CAACZ,mBAAmB,CAACI,IAAI,CAAC,CAAC,GAAGS,mBAAmB,CAAC,CAAC;;IAE3D,CAAC,CAAC,CACH;EACH;EAEAK,cAAcA,CAACC,cAA2B;IACxC,OAAO,IAAI,CAACrB,IAAI,CAACsB,IAAI,CAAc,IAAI,CAACrB,MAAM,EAAEoB,cAAc,CAAC;EACjE;EAEAE,qBAAqBA,CAACZ,EAAU;IAC9B,MAAMD,GAAG,GAAG,GAAG,IAAI,CAACT,MAAM,IAAIU,EAAE,EAAE;IAClC,OAAO,IAAI,CAACX,IAAI,CAACwB,GAAG,CAAcd,GAAG,CAAC;EACxC;EAAC,QAAAe,CAAA,G;qBAlCU3B,kBAAkB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBhC,kBAAkB;IAAAiC,OAAA,EAAlBjC,kBAAkB,CAAAkC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}